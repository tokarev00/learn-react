{"version":3,"sources":["cmponents/Dialogs/Dialogs.module.css","cmponents/Dialogs/DialogItem/DialogItem.module.css","cmponents/Dialogs/Message/Message.module.css","cmponents/Dialogs/DialogItem/DialogItem.jsx","cmponents/Dialogs/Message/Message.jsx","cmponents/Dialogs/Dialogs.jsx","cmponents/Dialogs/DialogsContainer.jsx"],"names":["module","exports","dialogs","dialogsItems","messages","dialog","active","message","DialogItem","props","activeClassName","s","path","concat","id","react_default","a","createElement","className","dist","to","_ref","isActive","undefined","name","Message","maxLength30","maxLength","AddMessageForm","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","requiredField","reduxForm","form","Dialogs","dialogsElements","map","d","Dialogs_DialogItem_DialogItem","key","messagesElements","m","Dialogs_Message_Message","Dialogs_AddMessageForm","values","sendMessage","newMessageBody","compose","connect","state","dialogsPage","dispatch","body","sendMessageCreator","withAuthRedirect"],"mappings":"6EACAA,EAAAC,QAAA,CAAkBC,QAAA,yBAAAC,aAAA,8BAAAC,SAAA,gDCAlBJ,EAAAC,QAAA,CAAkBI,OAAA,2BAAAC,OAAA,iDCAlBN,EAAAC,QAAA,CAAkBM,QAAA,4ICkBHC,EAfI,SAACC,GAChB,IAAIC,EAAkBC,IAAEL,OACpBM,EAAI,YAAAC,OAAeJ,EAAMK,IAE7B,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAWP,IAAEN,QACdU,EAAAC,EAAAC,cAACE,EAAA,EAAO,CACJC,GAAIR,EACJM,UALG,SAAAG,GAAA,IAAGC,EAAQD,EAARC,SAAQ,OAAOA,EAAWZ,OAAkBa,IAOjDd,EAAMe,0BCJRC,EAPC,SAAChB,GACb,OACIM,EAAAC,EAAAC,cAAA,OAAKC,UAAWP,IAAEJ,SACbE,EAAMF,2CCwBbmB,EAAcC,YAAU,IAE1BC,EAAiB,SAACnB,GAClB,OACIM,EAAAC,EAAAC,cAAA,QAAMY,SAAUpB,EAAMqB,cAClBf,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACc,EAAA,EAAK,CACNC,UAAWC,IACXT,KAAK,iBACLU,YAAY,qBACZC,SAAU,CAACT,EAAaU,QAG5BrB,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,yBAKjBW,EAAiBS,YAAU,CAACC,KAAM,qBAAjBD,CAAuCT,GACzCW,MA1CC,SAAC9B,GAEb,IAAI+B,EAAkB/B,EAAMP,QAAQuC,IAAI,SAAAC,GAAC,OAAI3B,EAAAC,EAAAC,cAAC0B,EAAU,CAACnB,KAAMkB,EAAElB,KAAMoB,IAAKF,EAAE5B,GAAIA,GAAI4B,EAAE5B,OACpF+B,EAAmBpC,EAAML,SAASqC,IAAI,SAAAK,GAAC,OAAI/B,EAAAC,EAAAC,cAAC8B,EAAO,CAACxC,QAASuC,EAAEvC,QAASqC,IAAKE,EAAEhC,GAAIA,GAAIgC,EAAEhC,OAM7F,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAWP,IAAET,SACda,EAAAC,EAAAC,cAAA,OAAKC,UAAWP,IAAER,cACbqC,GAELzB,EAAAC,EAAAC,cAAA,OAAKC,UAAWP,IAAEP,UACdW,EAAAC,EAAAC,cAAA,WAAM4B,GACN9B,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC+B,EAAc,CAACnB,SAZZ,SAAAoB,GAChBxC,EAAMyC,YAAYD,EAAOE,gDCSlBC,sBACHC,YAfU,SAACC,GACnB,MAAO,CACHpD,QAASoD,EAAMC,YAAYrD,QAC3BE,SAAUkD,EAAMC,YAAYnD,SAC5B+C,eAAgBG,EAAMC,YAAYJ,iBAGjB,SAACK,GACtB,MAAO,CACHN,YAAa,SAACO,GAAUD,EAASE,YAAmBD,QAOhDE,IAFGP,CAEgBb","file":"static/js/2.d6734304.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__qiwT0\",\"dialogsItems\":\"Dialogs_dialogsItems__CUnjZ\",\"messages\":\"Dialogs_messages__jhr8P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"DialogItem_dialog__1K6is\",\"active\":\"DialogItem_active__1U4nu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__3fzUL\"};","import React from \"react\";\r\nimport s from \"./DialogItem.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n    let activeClassName = s.active;\r\n    let path = `/dialogs/${props.id}`;\r\n    let isActive = ({ isActive }) => isActive ? activeClassName : undefined;\r\n    return (\r\n        <div className={s.dialog}>\r\n            <NavLink\r\n                to={path}\r\n                className={isActive}\r\n            >\r\n                {props.name}\r\n            </NavLink>\r\n        </div>\r\n    )\r\n}\r\nexport default DialogItem;","import React from \"react\";\r\nimport s from \"./Message.module.css\";\r\n\r\nconst Message = (props) => {\r\n    return (\r\n        <div className={s.message}>\r\n            {props.message}\r\n        </div>\r\n    )\r\n}\r\nexport default Message;","import s from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport React from \"react\";\r\nimport { Field, reduxForm } from 'redux-form'\r\nimport {Textarea} from \"../common/FormsControls/FormControls\";\r\nimport {maxLength, requiredField} from \"../../utils/validators/validators\";\r\nconst Dialogs = (props) => {\r\n\r\n    let dialogsElements = props.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id} />)\r\n    let messagesElements = props.messages.map(m => <Message message={m.message} key={m.id} id={m.id}/>)\r\n\r\n    let addNewMessage = values => {\r\n        props.sendMessage(values.newMessageBody);\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n                <div>\r\n                    <AddMessageForm onSubmit={addNewMessage} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nconst maxLength30 = maxLength(30);\r\n\r\nlet AddMessageForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                component={Textarea}\r\n                name=\"newMessageBody\"\r\n                placeholder=\"Enter your message\"\r\n                validate={[maxLength30, requiredField]}\r\n                />\r\n            </div>\r\n            <div><button >Send</button></div>\r\n        </form>\r\n    )\r\n}\r\n\r\nAddMessageForm = reduxForm({form: 'dialogMessageForm'})(AddMessageForm)\r\nexport default Dialogs;","\r\nimport { sendMessageCreator} from \"../../redux/dialogs-reducer\";\r\nimport React from \"react\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogs: state.dialogsPage.dialogs,\r\n        messages: state.dialogsPage.messages,\r\n        newMessageBody: state.dialogsPage.newMessageBody,\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage: (body) => {dispatch(sendMessageCreator(body))}\r\n    }\r\n}\r\n\r\n\r\nexport default compose(\r\n            connect(mapStateToProps, mapDispatchToProps),\r\n            withAuthRedirect,)(Dialogs);"],"sourceRoot":""}